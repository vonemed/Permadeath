//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentEntityApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class LootEntity {

    static readonly Loot.SpawnedComponent spawnedComponent = new Loot.SpawnedComponent();

    public bool isSpawned {
        get { return HasComponent(LootComponentsLookup.Spawned); }
        set {
            if (value != isSpawned) {
                var index = LootComponentsLookup.Spawned;
                if (value) {
                    var componentPool = GetComponentPool(index);
                    var component = componentPool.Count > 0
                            ? componentPool.Pop()
                            : spawnedComponent;

                    AddComponent(index, component);
                } else {
                    RemoveComponent(index);
                }
            }
        }
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentMatcherApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public sealed partial class LootMatcher {

    static Entitas.IMatcher<LootEntity> _matcherSpawned;

    public static Entitas.IMatcher<LootEntity> Spawned {
        get {
            if (_matcherSpawned == null) {
                var matcher = (Entitas.Matcher<LootEntity>)Entitas.Matcher<LootEntity>.AllOf(LootComponentsLookup.Spawned);
                matcher.componentNames = LootComponentsLookup.componentNames;
                _matcherSpawned = matcher;
            }

            return _matcherSpawned;
        }
    }
}
