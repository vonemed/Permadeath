//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentEntityApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class BoosterEntity {

    static readonly Boosters.CursedComponent cursedComponent = new Boosters.CursedComponent();

    public bool isCursed {
        get { return HasComponent(BoosterComponentsLookup.Cursed); }
        set {
            if (value != isCursed) {
                var index = BoosterComponentsLookup.Cursed;
                if (value) {
                    var componentPool = GetComponentPool(index);
                    var component = componentPool.Count > 0
                            ? componentPool.Pop()
                            : cursedComponent;

                    AddComponent(index, component);
                } else {
                    RemoveComponent(index);
                }
            }
        }
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentMatcherApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public sealed partial class BoosterMatcher {

    static Entitas.IMatcher<BoosterEntity> _matcherCursed;

    public static Entitas.IMatcher<BoosterEntity> Cursed {
        get {
            if (_matcherCursed == null) {
                var matcher = (Entitas.Matcher<BoosterEntity>)Entitas.Matcher<BoosterEntity>.AllOf(BoosterComponentsLookup.Cursed);
                matcher.componentNames = BoosterComponentsLookup.componentNames;
                _matcherCursed = matcher;
            }

            return _matcherCursed;
        }
    }
}
